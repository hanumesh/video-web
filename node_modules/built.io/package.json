{
  "name": "built.io",
  "description": "The built.io SDK",
  "author": {
    "name": "raweng"
  },
  "version": "2.0.46",
  "dependencies": {
    "when": "3.4.3",
    "rest": "1.1.1",
    "ramda": "0.8.0",
    "mime": "1.2.11",
    "blueimp-md5": "1.1.0",
    "ua-parser-js": "0.7.3",
    "crypto": "0.0.3",
    "socket.io-client": "1.2.1"
  },
  "devDependencies": {
    "socket.io": "*",
    "browserify": "*",
    "chai": "^1.9.2",
    "chai-as-promised": "*",
    "gulp": "*",
    "gulp-add-src": "^0.2.0",
    "gulp-buffer": "0.0.2",
    "gulp-clean": "^0.3.1",
    "gulp-cog": "^0.1.2",
    "gulp-concat": "^2.4.2",
    "gulp-json-editor": "^2.2.1",
    "gulp-load-plugins": "^0.7.1",
    "gulp-replace": "*",
    "gulp-rimraf": "^0.1.1",
    "gulp-run": "^1.6.4",
    "gulp-shell": "^0.2.10",
    "gulp-uglify": "^1.0.1",
    "gulp-zip": "^2.0.2",
    "jaguarjs-jsdoc": "0.0.1",
    "jsdoc": "*",
    "mocha": "*",
    "nock": "*",
    "rimraf": "^2.2.8",
    "run-sequence": "^1.0.2",
    "semver": "^4.1.0",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.0.0"
  },
  "keywords": [
    "built",
    "backend",
    "baas",
    "mbaas",
    "sdk",
    "javascript"
  ],
  "scripts": {
    "WithoutRealtime": "node ./browserifyBuilds/WithoutRealTime.js",
    "WithRealtime": "node ./browserifyBuilds/WithRealTime.js",
    "generateDocsForWRT": "jsdoc -t /usr/local/lib/node_modules/jaguarjs-jsdoc/ -c templateConfig.json lib/ -d docs/docsWRT -r /home/abhijeet/Documents/node/built/jsdocReadMe/README_WRT.md",
    "generateDocsForRT": "jsdoc -t /usr/local/lib/node_modules/jaguarjs-jsdoc/ -c templateConfig.json lib/ -d docs/docsRT -r /home/abhijeet/Documents/node/built/jsdocReadMe/README_RT.md"
  },
  "main": "./lib/built",
  "readme": "# Quick Overview  \n\n## API Docs\nFor detailed API docs please click [here](http://javascriptsdk.builtapp.io \"API DOCS\")  \n\n## Intro  \nThe Javascript SDK provided by Built.io Backend is available for both, the Browser as well as the Node.js environment. Let us quickly understand the process to install and initialize this SDK, as well as the other features it provides.\n\n## Installation \n\n### Node.js\n  To use this SDK on Node.js, follow the steps given below:\n\n  * Download the buit.io SDK from npm repository.\n\n          npm install built.io\n          \n  * Require the SDK module in your application.\n\n        var Built = require('built.io'); \n\n## Basic structure\n\n  The structure followed by SDK logically resembles the application structure on Built.io Backend. Once you have done the basic setup explained in the [Installation](#installation) section, you get a Built object, which can be used to initialize different modules.\n\n  The initialization process for each module is explained below.\n\n  * ### Application\n\n    To initialize an app, use the App constructor on the Built object and provide the application's api key.\n    \n          //'blt5d4sample2633b' is a dummy Application API key\n          var app = Built.App('blt5d4sample2633b');\n \n  * ### Class\n\n    An application can have multiple classes. Similarly, an application instance has a class constructor that accepts the uid of the class whose instance is to be created.\n\n          var ProjectClass = app.Class('project');               \n\n  * ### Object\n\n    An object is an instance of a class. The SDK follows this by providing an 'Object' constructor on the class instance. The object constructor accepts an existing object's uid or data to initialize a new object.\n\n          var Project = ProjectClass.Object;\n          var project = Project({\n            name : 'Abc'\n          });\n\n  * ### Query\n\n    Query is used to retrieve objects of a class based on certain conditions. The SDK provides a Query constructor on the class instance, which, when executed, would retrieve objects of that class.\n\n          var query = ProjectClass.Query();\n\n  * ### Upload\n    \n    The Upload constructor can be accessed on the App instance.\n\n          var upload = app.Upload();\n\n## Cache Policies\n  \n  The SDK supports caching, and uses the browser's 'localStorage' to maintain it. The cache policies available for use are listed below.\n\n  * ##### ONLY_NETWORK (Default)\n    This is the default cache policy. It will always get the data from a network call.\n\n  * ##### CACHE_ELSE_NETWORK\n    This policy will try to first get the data from cache. On failure, it would make a network call.\n\n  * ##### NETWORK_ELSE_CACHE\n    This policy will try to make a network call. On failure, it would fetch the data from cache.\n\n  * ##### CACHE_THEN_NETWORK\n    This policy would first get the data from cache, and then make a network call to get the updated copy.\n\n  Cache policy can be set for the entire application. This means that all the queries built using this application instance would follow the defined cache policy.\n         \n          //'blt5d4sample2633b' is a dummy Application API key\n          var app = Built.App('blt5d4sample2633b').setCachePolicy(Built.CachePolicy.CACHE_ELSE_NETWORK);\n\n  Cache policy can also be set on individual queries as given below.\n          //'blt5d4sample2633b' is a dummy Application API key\n          var query   = Built.App('blt5d4sample2633b').Class('project').Query();\n          query       = query.setCachePolicy(Built.CachePolicy.CACHE_ELSE_NETWORK);\n\n## Transforms\n\n  Transforms allow you to get the objects returned from a query in a format other than the default. For example, you can choose to get a Backbone.js collection instead of an array of objects.\n\n  The transforms available for use are listed below.\n\n  * #### toJSON()\n    \n  This transform would return the query result as an array of plain javascript objects.\n          //'blt5d4sample2633b' is a dummy Application API key\n          var query = Built.App('blt5d4sample2633b').Class('project').Query();\n          query\n          .where('name','abc')\n          .toJSON()\n          .exec()\n          .then(function(objects){\n              console.log(objects); // array of plain javascript objects\n          });\n\n  * #### toBackbone()\n\n  This transform would return the query result as a Backbone.js collection.\n          //'blt5d4sample2633b' is a dummy Application API key\n          var query = Built.App('blt5d4sample2633b').Class('project').Query();\n          query\n          .where('name','abc')\n          .toBackbone()\n          .exec()\n          .then(function(collection){\n              console.log(collection); // Backbone.js collection\n          });\n\n## Immutability\n\n  The SDK follows the concept of immutability. This means that any operation intended to modify the state of an object results into creation of a new object with the intended modification. The state of the original object is maintained.\n\n  The advantages of immutability are explained below.\n\n1] Suppose you want to upload three files to Built.io Backend, with all three sharing the same ACL. The code for this is simplified because of immutability.\n\n  * Create an ACL object with the intended permission.\n\n        var acl = Built.ACL();\n        // Returns a new ACL object with read permission\n        acl     = acl.setPublicReadAccess(true); \n\n  * Create an upload object and apply ACL to it.\n\n        //'blt5d4sample2633b' is a dummy Application API key\n        var upload = Built.App('blt5d4sample2633b').Upload() \n                     .setACL(acl);   \n\n  * We can now create multiple uploads using the existing upload object.\n\n        var upload1 = upload.setFile('/home/abc/Pictures/tiger.gif');\n\n        var upload2 = upload.setFile('/home/abc/Pictures/duck.gif');\n\n        var upload3 = upload.setFile('/home/abc/Pictures/dolphin.gif');\n\n2] Suppose you want create two app instances which are exactly similar to each other but belong to different tenants. The code for this is simplified because of immutability.\n\n      var app   = Built\n                  .App('blt5d4sample2633b')\n                  .setCachePolicy(Built.CachePolicy.CACHE_ELSE_NETWORK);\n\n      var app1  = app.setTenant('sample_tenant'); \n\n      var app2  = app.setTenant('sample_tenant1');\n\n\n\n## Promises\n\n  SDK uses promises for handling all its async operations. Listed below are a few examples.\n\n  * ### Saving an object\n\n    Saving an object on Built.io Backend is an async task. Therefore, the save() method returns a promise which resolves with saved object.\n          // Project is 'Object' constructor\n          Project({             \n            name : 'Super Project #41!'\n          })\n          .save()\n          .then(function(object){\n            // object returned from Built.io Backend\n          });\n\n  * ### Executing a query\n\n    Executing a query on Built.io Backend too is an async task. Therefore, exec() method returns a promise which resolves with all the objects that fulfil the query condition.\n\n        ProjectClass\n        .Query()\n        .where('name','Super Project #41!')\n        .exec()\n        .then(function(objects){\n          console.log(object[0].toJSON())\n        });\n\n## Realtime Functionality\n\n  Several applications such as chat, sock updates, alarm system, etc. require data to be fetched and pushed to and forth from the server in a matter of seconds. To support these requirements, Built.io Backend provides realtime functionality. In this, a socket connection is established between the client and the server, which enhances the speed of communication between the two.\n\n   * ### API\n\n   Built.io Backend uses events to notify the users when a particular action is performed. To listen to these events, we must first setup event listeners.\n\n    The SDK provides several handy functions that help you manege the realtime functionality better. These functions are explained below in detail.\n\n    * ### on\n\n      This function is available on constructors as well as instances. It takes two arguments: the event on which we would like to listen to, and the listener to be invoked when the event is triggered. Below is a example where we setup a listener on Object constructor and its instance. Setting up a listener on instance requires read permission on it. (Refer actual documentation for more detailed explaination)\n            //'blt5d4sample2633b' is a dummy Application API key\n            // app.Class('class_name').Object returns a Object constructor\n            // 'project' is a uid of a class on Built.io Backend\n            // 'blt211sample241c' is uid of an object on Built.io Backend\n            var app    = Built.App('blt5d4sample2633b').enableRealtime();\n\n            var Project = app.Class('project').Object; \n\n            var project = Project('blt211sample241c'); \n\n            Project.on('update',updateCB);\n\n            project.on('update',updateCB);   \n\n            function updateCB(project){\n              console.log(project.toJSON()); \n            }\n\n  * ### off\n\n      As the name suggests, this method is used to stop a user from listening to event notifications. Similar to [on( )](#on) function, it takes two arguements, both of which are optional.\n\n      1. A specific listener could be turned off as shown below.\n              //'blt5d4sample2633b' is a dummy Application API key\n              // app.Class('class_name').Object returns a Object constructor\n              // 'project' is a uid of a class on Built.io Backend\n              var app    = Built.App('blt5d4sample2633b').enableRealtime();\n\n              var Project = app.Class('project').Object; \n\n              Project.on('update', updateCB);\n\n              Project.on('create', updateCB);\n\n              //turns off listener for update only\n              Project.off('update',updateCB); \n\n              function updateCB(project){\n                  console.log(project.toJSON()); \n              }\n\n      2. All listeners attached to a resource could be removed as shown below.\n              //'blt5d4sample2633b' is a dummy Application API key\n              // app.Class('class_name').Object returns a Object constructor\n              // 'project' is a uid of a class on Built.io Backend\n              var app    = Built.App('blt5d4sample2633b').enableRealtime();\n\n              var Project = app.Class('project').Object; // Object constructor\n\n              Project.on('update', updateCB);\n\n              Project.on('create', updateCB);\n\n              Project.off(); //turns off all listener attached on Project\n\n              function updateCB(project){\n                  console.log(project.toJSON()); \n              }\n      3. All listeners attached to a given event on a resource coule be removed as shown below.\n              //'blt5d4sample2633b' is a dummy Application API key\n              // app.Class('class_name').Object returns a Object constructor\n              // 'project' is a uid of a class on Built.io Backend\n              var app    = Built.App('blt5d4sample2633b').enableRealtime();\n\n              var Project = app.Class('project').Object;\n\n              Project.on('update', printJSON);\n\n              Project.on('update', printObject);\n\n              Project.on('create', printJSON);\n\n              //turns off all listener attached on Project for update event.\n              Project.off('update');       \n\n              function printJSON(project){\n                  console.log(project.toJSON()); // updated object\n              }\n\n              function printObject(project){\n                  console.log(project); // updated object\n              }\n\n\n  * ### broadcast\n\n    Built.io Backend allows you to broadcast message that could be listened by others by setting up listeners for it. Broadcast method should be used to broadcast message and is available on constructors as well as instance. Update permission is required on the resource to be able to broadbast a message. The example given below demonstrates the syntax.\n\n          //'blt5d4sample2633b' is a dummy Application API key\n          // app.Class('class_name').Object returns a Object constructor\n          // 'project' is a uid of a class on Built.io Backend\n          var app    = Built.App('blt5d4sample2633b').enableRealtime();\n\n          var Project = app.Class('project').Object; \n\n          Project.broadcast('Hello Built.io Backend');\n\n          //Subscriber\n\n          var app    = Built.App('blt5d4sample2633b').enableRealtime();\n\n          var Project = app.Class('project').Object; // Object constructor\n\n          Project.on('broadcast',function(message){\n            console.log(message);\n          });\n\n* ### Presence\n\n    This feature helps you determine if a certain application user is currently online or offline. It stores the \"last seen\" timestamp of the user, which is especially useful for chat applications. Additionally, it allows you to store a \"state\" associated with your profile (you could use it to store chat statuses, for example).\n\n    Here is a list of some handy functions that will help you the presence feature better.\n\n    * ### getPresence\n\n    1] To get the logged-in user's presence details, the SDK provides getPresence() on User constructor, which returns a promise that eventually resolves with instance of presence module. (Refer to the actual documentation for details about presence module).\n\n            //'blt5d4sample2633b' is a dummy Application API key\n\n            // Assuming user has already logged-in\n            var app  = Built.App('blt5d4sample2633b').enableRealtime();\n            var User = app.User;\n            User\n            .getPresence() \n            .then(function(presence){\n              console.log(presence.toJSON());\n              // modifying the user's presence to be accesible publicly.\n              presence\n              .setPublic(true)\n              .save()\n              .then(function(presence){\n                console.log(presence);\n              });\n            });\n\n   2] To get the presence details of some other application user, the SDK provides getPresence method on user instance. \n\n   The below given example demonstrates the syntax.\n            //'blt5d4sample2633b' is a dummy Application API key\n            // 'blt211sample241c' is uid of an object on Built.io Backend\n            var app  = Built.App('blt5d4sample2633b').enableRealtime();\n            var user = app.User('blt211sample241c');\n            user\n            .getPresence(true)\n            .then(function(presence){\n              console.log(presence.toJSON());\n            });\n              \n          //You would be able access the presence details of a user only if the user has allowed his/her presence details to be publicly visible or has shared it with you, by adding you in the whitelist.\n\n    * ### requestPresenceAccess\n\n    In some chat applications, you may want to put a functionality that allows you to access other users' presece details by requesting access. We provide a similar functionality with requestPresence function. You can request a certain user to access his presence.\n\n    Example below demonstrates the syntax.\n            //'blt5d4sample2633b' is a dummy Application API key\n            // 'blt211sample241c' is uid of an object on Built.io Backend\n            var app  = Built.App('blt5d4sample2633b').enableRealtime();\n            var user = app.User('blt211sample241c');\n            user\n            .requestPresenceAccess()\n            .then(function(){\n              // done\n            });\n\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "built.io@2.0.46",
  "_from": "built.io@*"
}
