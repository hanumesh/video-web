var R                     = require('ramda');
var utility               = require('./utilities/utility');
var instanceMethodBuilder = require('./utilities/instanceMethodBuilder')();
var Built                 = require('./built');
var Event                 = require('./analyticsEvent')

var multipleEvent = '/events/trigger_multiple';

/**
* @class Analytics
* @classdesc 
* With analytics, you can track various activity patterns of the user, and modify your application features accordingly. 
* @instance
* @description To see how your application is faring in the wild use Analytics.
* @param {object} trackAnonymously Enables annonymous tracking. (Logged-in users details is not traced) (Optional)
* @param {object} batchSize Batch size specifies the number of triggers to be buffered before making a network call. (Optional)
* @param {object} superProperties Set of custom properties that are to be sent along with each event. (Optional)
* @example
* //'blt5d4sample2633b' is a dummy Application API key  
* var Analytics = Built.App('blt5d4sample2633b').Analytics; //Returns Analytics constructor
* var analytics  = app.Analytics();
* var analytics1 = app.Analytics(true); 
* var analytics2 = app.Analytics(false, 10); 
* var analytics3 = app.Analytics(true, 20, {
*   key:'value'
* });
* @return {Analytics}
*/
var analyticCons = module.exports = R.curry(function(app, headers, queue, defaultProperties , trackAnonymously, batchSize, superProperties) {
  var returnObj = {
    app                    : app,
    headers                : headers,
    defaultProperties      : defaultProperties,
    queue                  : queue,
    trackAnonymously       : trackAnonymously,
    batchSize              : batchSize,
    superProperties        : superProperties
  }

var curriedEvent = Event(app, returnObj);
/**
* Use {@link Event} to trigger an event in Built.io Backend.
* @name Event
* @memberof Analytics
* @example
* //'blt5d4sample2633b' is a dummy Application API key 
* var event = Built.App('blt5d4sample2633b').Analytics().Event('login').
*/
returnObj.Event   = function(uid, superProperties){
  if(!uid)
    throw new Error("uid not found");
  if(superProperties){
    return curriedEvent(uid,superProperties);
  }else{
    return curriedEvent(uid,{});
  }
}
utility.copyProperties(returnObj.Event , Event);
return instanceMethodBuilder.build(module.exports, returnObj);
});

var set = module.exports.set = R.curry(function(key, value, analytics) {
  var queue            = analytics.queue;
  var trackAnonymously = analytics.trackAnonymously;
  var batchSize        = analytics.batchSize;
  var superProperties  = analytics.superProperties;
  var headers          = analytics.headers; 
  switch(key){
    case "headers":
      headers = value;
      break;
    case "queue":
      queue = value;
      break;
    case "trackAnonymously":
      trackAnonymously = value;
      break;
    case "batchSize":
      batchSize = value;
      break;
    case "superProperties":
      superProperties = value;
      break;
  }
  return analyticCons(analytics.app, headers, queue, analytics.defaultProperties, trackAnonymously, batchSize, superProperties);
})
instanceMethodBuilder.define('set', 3);

var get = module.exports.get = R.curry(function(key, analytics){
  return analytics[key];
});
instanceMethodBuilder.define('get', 2);

/**
* Default properties are the properties that the SDK sends with each event.
* @memberof Analytics
* @function getDefaultProperties
* @instance
* @example
* var analytics = Built.App('blt5d4sample2633b').Analytics();
* console.log(analytics.getDefaultProperties());
* @return {object}
*/
module.exports.getDefaultProperties = function(analytics) { 
  //defaultProperties is a function which generates default properties dynamically 
  return analytics.defaultProperties(16);
};
instanceMethodBuilder.define('getDefaultProperties', 1);

/**
* Batch size specifies the number of triggers to be buffered before making a network call.The idea is to reduce the number of api calls. The default batch size is set to 1.
* @memberof Analytics
* @param {Number} size The batch size.
* @function setBatchSize
* @instance
* @example
* var analytics = Built.App('blt5d4sample2633b').Analytics();
* analytics     = analytics.setBatchSize(3);

* //This event trigger will be buffered
* analytics.Event('test').trigger();
*  
* //Event this event trigger will be buffered 
* analytics.Event('test1').trigger();
*  
* // All three events are triggered in a single network call.
* analytics.Event('test3').trigger(); 
* @return {Analytics}
*/
module.exports.setBatchSize = set('batchSize');
instanceMethodBuilder.define('setBatchSize',2);

/**
* Returns the batchSize.
* @memberof Analytics
* @function getBatchSize
* @instance
* @example
* var analytics = Built.App('blt5d4sample2633b').Analytics(true, 10);
* //Will return 10
* console.log(analytics.getBatchSize()); 
* @return {Number}
*/
module.exports.getBatchSize = get('batchSize');
instanceMethodBuilder.define('getBatchSize',1);

/**
* By default, the logged-in user's uid is sent to the server for analysis. To track anaymously, set it to false.
* @memberof Analytics
* @function setTrackAnonymously
* @param {Boolean} trackAnonymously Whether to track the logged-in user's uid
* @instance
* @example
* // By default will track user's uid
* var analytics = Built.App('blt5d4sample2633b').Analytics(); 
* // Would track anonymously
* analytics     = analytics.setTrackAnonymously(true); 
* @return {Analytics}
*/
module.exports.setTrackAnonymously = set('trackAnonymously')
instanceMethodBuilder.define('setTrackAnonymously',2);

/**
* Determines whether users are tracked anonymously or not
* @memberof Analytics
* @function getTrackAnonymously
* @instance
* @example
* var analytics = Built.App('blt5d4sample2633b').Analytics(true, 10);
* console.log(analytics.getTrackAnonymously());
* @return {Boolean}
*/
module.exports.getTrackAnonymously = get('trackAnonymously');
instanceMethodBuilder.define('getTrackAnonymously',1);

/**
* Super properties are a set of properties that need to be sent along with each trigger.
* @memberof Analytics
* @function setSuperProperties
* @param {Object} properties A set of common properties to be sent with each trigger
* @instance
* @example
* var analytics = Built.App('blt5d4sample2633b').Analytics();
*
* // Properties that would be sent are { company_name: "raweng", abc: "pqr"} 
* analytics     = analytics.setSuperProperties({
*   company_name : "raweng"
* });
* analytics.Event('test',{
*   abc: "pqr"
* }).trigger();
* @return {Boolean}
*/
module.exports.setSuperProperties = set('superProperties');
instanceMethodBuilder.define('setSuperProperties',2);

/**
* Returns the super properties set on this instance
* @memberof Analytics
* @function getSuperProperties
* @instance
* @example
* var analytics = Built.App('blt5d4sample2633b').Analytics(true, 10, {
*   domain: 'raweng.com'
* });
* console.log(analytics.getSuperProperties());
* @return {object}
*/
module.exports.getSuperProperties = get('superProperties');
instanceMethodBuilder.define('getSuperProperties',1);

/**
* Sets a header on analytics level
* @memberof Analytics
* @function setHeader
* @instance
* @example
* var analytics = Built.App('blt5d4sample2633b').Analytics();
* analytics = analytics.setHeader('abc','pqr')
* console.log(analytics.getHeaders());
* @return {Analytics}
*/
module.exports.setHeader = R.curry(function(key, value, analytics){
  var newHeader  = R.mixin({}, analytics.headers);
  newHeader[key] = value;
  return set('headers', newHeader, analytics);
})
instanceMethodBuilder.define('setHeader',3);

/**
* Returns headers set on analytics level
* @memberof Analytics
* @function getHeaders
* @instance
* @example
* var analytics = Built.App('blt5d4sample2633b').Analytics();
* analytics = analytics.setHeader('abc','pqr')
* console.log(analytics.getHeaders());
* @return {object}
*/
module.exports.getHeaders = get('headers');
instanceMethodBuilder.define('getHeaders',1);

/**
* Triggers or enqueues a set of events based on the batchSize
* @memberof Analytics
* @function trigger
* @param {Array|Object} event(s) Accepts an array of 'Event' objects or a single 'Event' object
* @param {Boolean} forceTrigger Triggers the events regardless of the batchSize (Optional)
* @instance
* @example
* var analytics = Built.App('blt5d4sample2633b').Analytics(true, 10);
* var eventObj  = analytics.Event('test');
* var eventObj1 = analytics.Event('test1');
* 
* //Case 1:
* //Enqueues the two events in buffer
* analytics.trigger([eventObj, eventObj1]); 
* //Enqueues the eventObj in buffer
* analytics.trigger(eventObj); 
* 
* //Case 2:
* // Triggers immediately
* analytics.trigger([eventObj, eventObj1], true) 
* //Triggers eventObj immediately
* analytics.trigger(eventObj, true); 
*/
module.exports.trigger = function(events, forceTrigger, analytics){
  if(!utility.isArray(events)){
    events = [events]
  }
  var queuedEvents = analytics.get('queue');
  if(forceTrigger) {
   return triggerNReset(events, analytics);
  }
  if(analytics.get('batchSize') === 1){
   return triggerNReset(queuedEvents, analytics); 
  }else{
    var concatinatedEvents = queuedEvents.concat(events);
    if(concatinatedEvents.length >= analytics.getBatchSize()){
      return triggerNReset(queuedEvents, analytics); 
    }else{
      analytics.queue = concatinatedEvents;
    }
  }
}
instanceMethodBuilder.define('trigger', 3, [false]);


/**
* Flushes all the events that are buffered
* @memberof Analytics
* @function flush
* @instance
* @example
* var analytics = Built.App('blt5d4sample2633b').Analytics(true, 10);
* var eventObj  = analytics.Event('test');
* var eventObj1 = analytics.Event('test1');
* 
* //This event trigger will be buffered
* eventObj.trigger();
* 
* //Even this event trigger will be buffered 
* eventObj1.trigger(); 
* 
* console.log(analytics.getQueue().length)
* 
* // Triggers the two events and empties the queue
* analytics.flush(); 
*/
module.exports.flush = function(analytics){
  module.exports.trigger(analytics.queue, true, analytics);
  analytics.resetBatchQueue();
}
instanceMethodBuilder.define('flush', 1);

/**
* Returns the queue
* @memberof Analytics
* @function getQueue
* @instance
* @example
* var analytics = Built.App('blt5d4sample2633b').Analytics(true, 10);
* var eventObj  = analytics.Event('test');
* var eventObj1 = analytics.Event('test1');
* 
* //This event trigger will be buffered
* eventObj.trigger();
* 
* //Even this event trigger will be buffered
* eventObj1.trigger(); //buffered
* 
* console.log(analytics.getQueue())
*/
module.exports.getQueue = get('queue');

function triggerNReset(events, analytics){
  triggerMultiple(events);
  analytics.resetBatchQueue();
}

function triggerMultiple(eventArray){
  var analytics;                      //for getting the app instance required to generate url
  var keyValue = utility.keyValue;
  if(utility.isArray(eventArray)){ 
    if(eventArray.length > 0){
       analytics = eventArray[0].analytics;       
    }else{
      throw new Error('Events array is empty');
    }
  }
  var entity        = R.mixin(keyValue('events', constructProperties(eventArray)), keyValue('super_properties', constructSuperProperties(analytics)));
  var adaptor       = analytics.app.options.adaptor;
  var requestObject = utility.getAdaptorObj('POST', getTriggerMultipleURL(analytics.app), getCombinedHeaders(analytics), entity, null);
  return adaptor.makeCall(requestObject).then(function(response){
    return eventArray;
  });
}

function constructProperties (eventArray) {
  var multiEventObj = {};
  eventArray.forEach(function(event){
    var eventArray = multiEventObj[event.getUid()] || [];
    eventArray.push(utility.keyValue('properties',event.getProperties()));
    multiEventObj[event.getUid()] = eventArray;
  });
  return multiEventObj;
}

function constructSuperProperties(analytics){
  return R.mixin(analytics.getDefaultProperties(), analytics.getSuperProperties());
}

var resetBatchQueue = module.exports.resetBatchQueue = function(analytics){
  analytics.queue = [];
  return analytics;
}
instanceMethodBuilder.define('resetBatchQueue',1);

module.exports.pushEventInQueue = R.curry(function(eventObj, analytics){
  analytics.queue = analytics.get('queue').concat(eventObj);
  if(analytics.queue.length === analytics.getBatchSize()){
    module.exports.trigger(analytics.get('queue'), true, analytics);
    analytics.resetBatchQueue();
  }  
});
instanceMethodBuilder.define('pushEventInQueue', 2);

function getTriggerMultipleURL(app){
  return app.getURL() + multipleEvent; // GLOBAL variable
}