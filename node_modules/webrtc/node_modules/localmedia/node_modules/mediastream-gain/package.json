{
  "name": "mediastream-gain",
  "description": "cross-browser getUserMedia shim with node.js style error-first API.",
  "version": "1.0.1",
  "author": {
    "name": "Henrik Joreteg",
    "email": "henrik@andyet.net"
  },
  "dependencies": {
    "webrtcsupport": "^1.0.0"
  },
  "devDependencies": {
    "attachmediastream": "1.0.1",
    "browserify": "2.x",
    "getusermedia": "0.2.1",
    "precommit-hook": "0.3.x"
  },
  "keywords": [
    "browser",
    "getUserMedia",
    "WebRTC",
    "microphone",
    "webaudio"
  ],
  "license": "MIT",
  "main": "mediastream-gain.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/HenrikJoreteg/mediastream-gain"
  },
  "readme": "# mediastream-gain \n\n## What is this?\n\nA tiny browser module for creating a gain/volume controller for the audio channels in a [MediaStream](https://developer.mozilla.org/en-US/docs/WebRTC/MediaStream_API).\n\nIt's useful for controlling the volume of your microphone input before it's sent accross a peer connection in a WebRTC call, for example. This module is a small part of [SimpleWebRTC](http://simplewebrtc.com) where it is used for minimizing echos, by using [hark](http://latentflip.com/hark) to determine if you're speaking and turning your mic down a bit if you're not.\n\nThis module is suitable for use with [browserify](http://browserify.org)/CommonJS on the client. \n\nIf you're not using browserify or you want AMD support use `mediastream-volume.bundle.js`.\n\n\n## Important details\n\nThe way this works by replacing the first audio channel in the stream with one that is run through a gain filter. But beware that this *edits the stream you give it in place* it doesn't produce a new one.\n\n\n## Installing\n\n```\nnpm install mediastream-gain\n```\n\n## An example\n\nHere we use another piece of SimpleWebRTC [getusermedia](https://github.com/HenrikJoreteg/getusermedia) to fetch user media in a cross-browser, easy-to-handle-errors-and-lack-of-support sort of way. \n\nThis assumes a commonJS environment, but that's not a requirement (see above).\n\n```js\nvar MicGainController = require('mediastream-gain');\nvar getUserMedia = require('getusermedia');\nvar gainController;\n\ngetUserMedia(function (err, stream) {\n    // this will replace the audio channels in the \n    // stream\n    gainController = new MicGainController(stream);\n    // set gain to 20%\n    gainControl.setGain(.2);\n    // set gain to 0, effectively muting it\n    gainControl.setGain(0); \n    // there's also:\n    gainControl.off(); // equivalent to setGain(0)\n    gainControl.on(); // equivalent to setGain(1)\n});\n\n```\n\n## Methods\n\nIt couldn't be simpler, but behavior varies slighly based on availability of WebAudio support that can be wired into WebRTC.\n\nYou can check for support by checking the `support` property of the an instance of `gainController`\n\nThese will simply be noop functions if WebAudio isn't fully supported. \n\n**.setGain(Float)** - takes a number between 1 and 0\n**.getGain()** - returns current setting\n**.off()** - shortcut for turning mic off \n**.on()** - shortcut for full gain\n\n\n## License\n\nMIT\n\n## Created By\n\nIf you like this, follow: [@HenrikJoreteg](http://twitter.com/henrikjoreteg) on twitter.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/HenrikJoreteg/mediastream-gain/issues"
  },
  "_id": "mediastream-gain@1.0.1",
  "dist": {
    "shasum": "d98ec12fc80123ee8e2b75b987d5c86a526511f1"
  },
  "_from": "mediastream-gain@^1.0.0",
  "_resolved": "https://registry.npmjs.org/mediastream-gain/-/mediastream-gain-1.0.1.tgz"
}
